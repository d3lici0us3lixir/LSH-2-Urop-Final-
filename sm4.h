#ifndef SM4_H
#define SM4_H

#include<stdint.h>
#include <stdio.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <iostream>
#include <cstdlib>
#include <cstdint>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <vector>
#include <string>
using namespace std;

class SM4 {
public:
	SM4(uint8_t* key, uint8_t pt[16]);
	void left_shift(uint8_t pt[4], uint8_t result[4], int num);
	void L(uint8_t pt[4], uint8_t ct[4]);
	void T(uint8_t pt[4], uint8_t ct[4]);
	void F(uint8_t pt[16], uint8_t key[4], uint8_t ct[4]);
	void L1(uint8_t pt[4], uint8_t ct[4]);
	void T1(uint8_t pt[4], uint8_t ct[4]);
	void key_expanding(uint8_t* key);
	string round(uint8_t rounding);
	string make_return_str();


	const uint8_t sbox[256] =
	{
	0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05,
	0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99,
	0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62,
	0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6,
	0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8,
	0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35,
	0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87,
	0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e,
	0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1,
	0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3,
	0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f,
	0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51,
	0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8,
	0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0,
	0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84,
	0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48
	};
	const uint8_t fk[16] = { 0xa3, 0xb1, 0xba, 0xc6, 0x56, 0xaa, 0x33, 0x50, 0x67, 0x7d, 0x91, 0x97, 0xb2, 0x70, 0x22, 0xdc };
	const uint8_t ck[128] = {
	0x00,0x07,0x0E,0X15, 0x1C,0x23,0x2A,0x31, 0x38,0x3F,0x46,0x4D, 0x54,0x5B,0x62,0x69,
	0x70,0x77,0x7E,0X85, 0x8C,0x93,0x9A,0xA1, 0xA8,0xAF,0xB6,0xBD, 0xC4,0xCB,0xD2,0xD9,
	0xE0,0xE7,0xEE,0XF5, 0xFC,0x03,0x0A,0x11, 0x18,0x1F,0x26,0x2D, 0x34,0x3B,0x42,0x49,
	0x50,0x57,0x5E,0X65, 0x6C,0x73,0x7A,0x81, 0x88,0x8F,0x96,0x9D, 0xA4,0xAB,0xB2,0xB9,
	0xC0,0xC7,0xCE,0XD5, 0xDC,0xE3,0xEA,0xF1, 0xF8,0xFF,0x06,0x0D, 0x14,0x1B,0x22,0x29,
	0x30,0x37,0x3E,0X45, 0x4C,0x53,0x5A,0x61, 0x68,0x6F,0x76,0x7D, 0x84,0x8B,0x92,0x99,
	0xA0,0xA7,0xAE,0XB5, 0xBC,0xC3,0xCA,0xD1, 0xD8,0xDF,0xE6,0xED, 0xF4,0xFB,0x02,0x09,
	0x10,0x17,0x1E,0X25, 0x2C,0x33,0x3A,0x41, 0x48,0x4F,0x56,0x5D, 0x64,0x6B,0x72,0x79
	};
	uint8_t key_ex[32][4];
	uint8_t state[36][4], state2[16], state3[4];
	uint8_t ct[16] = {0,};



};
#endif
